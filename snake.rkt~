;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-beginner-abbr-reader.ss" "lang")((modname snake-game) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f)))
(require 2htdp/universe)
(require 2htdp/image)

;; --- Constants ---
(define WIDTH 20)
(define HEIGHT 20)
(define SNAKE-CELL (rectangle 1 1 "solid" "green"))
(define FOOD-CELL (rectangle 1 1 "solid" "red"))

(define MTS (rectangle WIDTH HEIGHT "outline" "black"))


;; --- Data Definitions ---
(define-struct co (x y))
;; A Coord is a (make-co Natural Natural) 
;; interp. grid coordinates.
;; -       x is the x-coordinate in pixels, Natural[0, WIDTH]
;; -       y is the y-coordinate in pixels, Natural[0, HIEGHT]
(define C1 (make-co 0 0))
(define C2 (make-co 10 10))
(define C3 (make-co 4 10))

;; Direction is one of:
;; - "up"
;; - "down"
;; - "left"
;; - "right"
;; interp. currnet direction of the snake

;; Snake is one of:
;; - empty
;; - (cons Coordinate Sanke)
(define S1 empty)
(define S2 (cons (make-co 1 10) S1))
(define S3 (cons (make-co 2 10) S2))
(define S4 (cons (make-co 3 10) S3)) ;; inital snake with length-3, head position coordinate 3, 10
(define S5 (cons (make-co 4 10 ) (cons (make-co 3 10) (cons (make-co 2 10) empty)))) ; second state snake with lenght-3, head position at coordinate 4, 10
(define S6 (cons (make-co 20 10 ) (cons (make-co 19 10) (cons (make-co 18 10) empty)))) ; snake hit the boundary
(define S7 (cons (make-co 5 10) S5))
(define S8 (cons (make-co 6 10) S7))
(define S9 (cons (make-co 6 9) S8))
(define S10 (cons (make-co 5 9) S8))
(define S11 (cons (make-co 5 10) S8)) ; snake hitting self, end game
(define S12 (cons (make-co 19 10 ) (cons (make-co 18 10) (cons (make-co 17 10) empty)))) ; snake hitting the boundary

(define-struct gs (snake food dir game-over))
;; GameState is a (make-gs [snake ListOfCoord] [food Coord] [dir Direction] [game-over Boolean])
;; interp.
(define GS1 (make-gs S4 C2 "right" false))  ;; game start with food at 10, 10
(define GS2 (make-gs S5 C2 "right" false))  ;; just snake moving one pixel right
(define GS3 (make-gs S4 C3 "right" false))  ;; snake moving one pixel right, hitting the food
(define GS4 (make-gs S11 C2 "right" false)) ;; snake hitting the boundary
(define GS5 (make-gs S20 C2 "right" true))  ;; game ended
(define GS6 (make-gs S4 C2 "up" false))     ;; player changed direction u
(define GS7 (make-gs (cons (make-co 4 10) S4) C2 "right" false)) ;; after snake getting the food, extending the length by one
(define GS8 (make-gs (cons (make-co 4 9) S4) C2 "up" false))

;; Functions

;; GameState -> GameState
;; run the game, starting with initial game state gs
;; Start with (main-gs
;;               (cons (make-co 3 10) (cons (make-co 2 10) (cons (make-co 1 10) empty)))
;;               (make-co 10 10)
;;               "right"
;;               false
;;            )
;; <no tests for main functions>

(define (main gs)
  (big-bang gs
    (on-tick next-gs)
    (to-draw render-gs)
    (on-key  change-direction)))

;; GameState -> GameState
;; advance the game by checking if the snake coordinate collide with food, or self, or boundary, then move the snake by one pixel
(check-expect (next-gs GS1) GS2) ; moving right with 1 pixel without hitting anything
(check-expect (next-gs GS6) GS8) ; moving up with 1 pexel without hitting anything
(check-expect (next-gs GS4) GS5) ; snake hitting the boundary and ending the game
(check-expect (next-gs GS3) GS7) ; snake hitting the food and extending by 1 pixel


; (define (next-gs gs) gs) ;stub
(define (next-gs gs)
  (cond [hitting-boundaries? gs]
        [hitting-self? gs]
        [else (move-snake gs)]
        ))


;; GameState -> Image
;; produce the GameState by drawing snake, food at x, y coordinate
;; !!!

(define (render-gs gs) MTS) ;stub


;; Direction KeyEvent -> Direction
;; update the direction when "up" "down" "left" "right" is pressed
;; !!!
(define (change-direction direction key) direction) ;stub



